@using Binix.Database
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Binix.Api.Model
@using Microsoft.EntityFrameworkCore
@inject IRepoTransactionBuilder _builder

<Card Title="Clusters" Subtitle="Clusters are income hosts">
    <table class="table-responsive-lg" style="width: 100%">
        <thead>
        <tr>
        <th>Cluster</th>
        <th>Forwaring Hosts</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cluster in _clusters)
        {
            <td>@cluster.Hostname</td>
           
                @if (cluster.Routes != null)
                {
                    <td>
                    @foreach(var host in cluster.Routes)
                    {
                        <table>
                            <thead>
                            <tr>
                                <th>Host</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td>@host.Name</td>
                            </tr>
                            </tbody>
                        </table>
                    }
        
                </td>
                }
        }
        </tbody>
    </table>
</Card>


@code
{
    [Parameter] public Guid ZoneId { get; set; }
    private Cluster[] _clusters;
    private bool _loaded = false;
    [Parameter] public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateAsync();
        _loaded = true;
    }

    protected async Task UpdateAsync()
    {
        await using var repo = _builder.Build();
        _clusters = repo.ReadOnly<Cluster>(s=>s.Include(s=>s.Zone) as DbSet<Cluster>).GetMany(s=>s.ZoneId == ZoneId);
    }
}
