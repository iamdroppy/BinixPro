@using System.Net
@using System.Net.Http.Json
@using Binix.Api.Model
@using Binix.Database
@using Microsoft.EntityFrameworkCore
@inject Binix.Database.IRepoTransactionBuilder _builder

<div id="container" class="domain-list">
    <div class="row">
        @if (_zones == null)
        {
            <pre class="white">Loading...</pre>
        }
        else if (!_zones.Any())
        {
            <pre class="white">No zones added</pre>
        }
        else
        {
            @foreach (var zone in _zones)
            {
                <div class="col-md-4">
                    <a href="/info/@zone.Id" style="text-decoration: none; text-transform: none">
                        <div class="card">
                            <div class="card-body black">
                                <h5 class="card-title" style=" display: inline-block; text-align: left">@zone.Name</h5>
                                <h6 class="card-subtitle mb2"><i>@(zone.Clusters?.Count() ?? 0) clusters</i></h6>

                                @if (zone?.Clusters?.Select(s => s.Routes).Any() ?? false)
                                {
                                    <i class="fa fa-check-square success"> </i><span class="success">Inactive</span>
                                }
                                else
                                {
                                    <i class="fa fa-square danger"></i> <span class="danger">Inactive</span>
                                }

                            </div>
                        </div>
                    </a>
                </div>
            }
        }
    </div>
</div>
@code {
    private Zone[] _zones;

    protected override async Task OnInitializedAsync()
    {
        await UpdateAsync();
    }
    
    private async Task UpdateAsync()
    {
        await using IRepoTransaction repo = _builder.Build();
        _zones = repo.ReadOnly<Zone>(s=>s.Include(s=>s.Clusters) as DbSet<Zone>).GetMany();
        StateHasChanged();
    }
}